/**
 * ## Original work
 *
 * Copyright Mapbox Inc 2014
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ## Modifications
 *
 * Copyright 2015 eBusiness Information
 *
 * This file is part of OSM Contributor.
 *
 * OSM Contributor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OSM Contributor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OSM Contributor.  If not, see <http://www.gnu.org/licenses/>.
 */
package io.mapsquare.osmcontributor.tileslayer;

import android.content.Context;
import android.content.res.AssetManager;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.util.Log;

import com.mapbox.mapboxsdk.constants.MapboxConstants;
import com.mapbox.mapboxsdk.tileprovider.MapTile;
import com.mapbox.mapboxsdk.tileprovider.modules.MBTilesFileArchive;
import com.mapbox.mapboxsdk.tileprovider.modules.MapTileDownloader;
import com.mapbox.mapboxsdk.tileprovider.tilesource.TileLayer;
import com.mapbox.mapboxsdk.views.util.constants.MapViewConstants;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import uk.co.senab.bitmapcache.CacheableBitmapDrawable;

/**
 * Tweaked {@link com.mapbox.mapboxsdk.tileprovider.tilesource.MBTilesLayer} at v0.7.3 in order to
 * zoom on a tile of zoom 19 when the zoom level is superior to 19.
 * <br/>
 * Our changes are marked with "Custom tweak:" comments.
 * <p/>
 * A layer that pulls resources from an MBTiles file. Used for offline map tiles,
 * like those generated by TileMill.
 */
public class MBTilesLayer extends TileLayer implements MapViewConstants, MapboxConstants {

    private static final String TAG = "MBTilesLayer";
    MBTilesFileArchive mbTilesFileArchive;
    private static final int TILE_SIZE = 256;
    public static final int PROVIDER_ZOOM_LIMIT = 19;

    /**
     * Initialize a new tile layer, represented by a MBTiles file.
     *
     * @param url     path to a MBTiles file
     * @param context the graphics drawing context
     */
    public MBTilesLayer(final Context context, final String url) {
        super(url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.')), url);
        initialize(url, context);
    }

    /**
     * Initialize a new tile layer, represented by a MBTiles file.
     * This constructor does need a context but as a consequence won't look
     * for an asset mbtiles
     *
     * @param url path to a MBTiles file
     */
    public MBTilesLayer(final String url) {
        this(null, url);
    }

    /**
     * Initialize a new tile layer, represented by a MBTiles file.
     *
     * @param file a MBTiles file
     */
    public MBTilesLayer(final File file) {
        super(file.getName(), file.getAbsolutePath());
        initialize(file);
    }

    /**
     * Initialize a new tile layer, represented by a Database file.
     *
     * @param db a database used as the MBTiles source
     */
    public MBTilesLayer(final SQLiteDatabase db) {
        super(getFileName(db.getPath()), db.getPath());
        initialize(db);
    }

    /**
     * Get the filename of this layer based on the full path
     *
     * @param path
     * @return the filename of the backing mbtiles file
     */
    private static final String getFileName(final String path) {
        return path.substring(path.lastIndexOf('/') + 1, path.lastIndexOf('.'));
    }

    /**
     * Creates a file from an input stream by reading it byte by byte.
     * todo: same as MapViewFactory's createFileFromInputStream
     */
    private static File createFileFromInputStream(InputStream inputStream, String URL) {
        try {
            File f = new File(URL);
            OutputStream outputStream = new FileOutputStream(f);
            byte[] buffer = new byte[1024];
            int length = 0;

            while ((length = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, length);
            }

            outputStream.close();
            inputStream.close();

            return f;
        } catch (IOException e) {
            Log.e(TAG, "Failed to create file from input stream.", e);
        }
        return null;
    }

    /**
     * Reads and opens a MBTiles file and loads its tiles into this layer.
     *
     * @param file
     */
    private void initialize(File file) {
        if (file != null) {
            mbTilesFileArchive = MBTilesFileArchive.getDatabaseFileArchive(file);
        }

        if (mbTilesFileArchive != null) {
            mMaximumZoomLevel = mbTilesFileArchive.getMaxZoomLevel();
            mMinimumZoomLevel = mbTilesFileArchive.getMinZoomLevel();
            mName = mbTilesFileArchive.getName();
            mDescription = mbTilesFileArchive.getDescription();
            mAttribution = mbTilesFileArchive.getAttribution();
            mBoundingBox = mbTilesFileArchive.getBounds();
            mCenter = mbTilesFileArchive.getCenter();
        }
    }

    /**
     * Reads and opens a MBTiles file given by url and loads its tiles into this layer.
     */
    private void initialize(final SQLiteDatabase db) {
        if (db != null) {
            mbTilesFileArchive = new MBTilesFileArchive(db);
        }

        if (mbTilesFileArchive != null) {
            mMaximumZoomLevel = mbTilesFileArchive.getMaxZoomLevel();
            mMinimumZoomLevel = mbTilesFileArchive.getMinZoomLevel();
            mName = mbTilesFileArchive.getName();
            mDescription = mbTilesFileArchive.getDescription();
            mAttribution = mbTilesFileArchive.getAttribution();
            mBoundingBox = mbTilesFileArchive.getBounds();
            mCenter = mbTilesFileArchive.getCenter();
        }
    }

    /**
     * Reads and opens a MBTiles file given by url and loads its tiles into this layer.
     */
    private void initialize(String url, final Context context) {
        initialize(getFile(url, context));
    }

    private File getFile(String url, final Context context) {
        if (context != null) {
            //we assume asset here
            AssetManager am = context.getAssets();
            InputStream inputStream;
            try {
                inputStream = am.open(url);
                final File mbTilesDir;
                if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
                        || (!Environment.isExternalStorageRemovable())) {
                    mbTilesDir = new File(context.getExternalFilesDir(null), url);
                } else {
                    mbTilesDir = new File(context.getFilesDir(), url);
                }
                return createFileFromInputStream(inputStream, mbTilesDir.getPath());
            } catch (IOException e) {
                Log.e(TAG, "MBTiles file not found in assets: " + e.toString());
                return null;
            }
        }
        try {
            return new File(url);
        } catch (Exception e) {
            Log.e(TAG, "can't load MBTiles: " + e.toString());
            return null;
        }
    }

    @Override
    public void detach() {
        if (mbTilesFileArchive != null) {
            mbTilesFileArchive.close();
            mbTilesFileArchive = null;
        }
    }

    @Override
    public CacheableBitmapDrawable getDrawableFromTile(final MapTileDownloader downloader,
                                                       final MapTile mapTile, boolean hdpi) {
        if (mbTilesFileArchive != null) {
            InputStream stream;

            // Custom tweak: If zoom > zoom limit, load the tile of zoom limit, cut the part of interest and resize it.
            if (mapTile.getZ() > PROVIDER_ZOOM_LIMIT) {
                // Create the corresponding MapTile of zoom 19
                int zoomFactor = (int) Math.pow(2, (mapTile.getZ() - PROVIDER_ZOOM_LIMIT));
                MapTile preMapTile = new MapTile(PROVIDER_ZOOM_LIMIT, mapTile.getX() / zoomFactor, mapTile.getY() / zoomFactor);

                // Fetch the tile in the database
                stream = mbTilesFileArchive.getInputStream(this, preMapTile);
                if (stream != null) {
                    Bitmap bitmap = BitmapFactory.decodeStream(stream);

                    // Cut the part of the Bitmap corresponding to the Tile of zoom 19
                    int cutTileSize = TILE_SIZE / zoomFactor;
                    Bitmap cutBitmap = Bitmap.createBitmap(bitmap, (mapTile.getX() % zoomFactor) * cutTileSize, (mapTile.getY() % zoomFactor) * cutTileSize, cutTileSize, cutTileSize);
                    // Resize the map to the right size
                    bitmap = Bitmap.createScaledBitmap(cutBitmap, TILE_SIZE, TILE_SIZE, false);
                    if (bitmap != null) {
                        CacheableBitmapDrawable result = downloader.getCache().putTileInMemoryCache(mapTile, bitmap);
                        if (result == null) {
                            Log.d(TAG, "error reading stream from mbtiles");
                        }
                        return result;
                    }
                }
            } else {
                stream = mbTilesFileArchive.getInputStream(this, mapTile);
                if (stream != null) {
                    CacheableBitmapDrawable result =
                            downloader.getCache().putTileStream(mapTile, stream, null);
                    if (result == null) {
                        Log.d(TAG, "error reading stream from mbtiles");
                    }
                    return result;
                }
            }
        }
        return null;
    }
}
